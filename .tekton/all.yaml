apiVersion: tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: BUILD
spec:
  triggers:
    - binding:
        name: pipeline-BUILD
      template:
        name: tt-common
---
apiVersion: tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: pipeline-BUILD
spec:
  params:
  - name: script
    value: ./scripts/pipeline-BUILD.sh
---
apiVersion: tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: tt-common
spec:
  params:
    - name: GIT_REPO
    - name: GIT_BRANCH
    - name: REGISTRY_REGION_ID
    - name: REGISTRY_NAMESPACE
    - name: TARGET_CLUSTER_NAME
    - name: IMAGE_NAME
    - name: TARGET_REGION_ID
    - name: TARGET_NAMESPACE
    - name: TARGET_RESOURCE_GROUP
    - name: COS_PLAN
    - name: APP_ID_PLAN
    - name: CLOUDANT_PLAN
    - name: script
  resourcetemplates:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: cd-secret
      type: Opaque
      stringData:
        API_KEY: $(params.API_KEY)
    - apiVersion: tekton.dev/v1alpha1
      kind: PipelineRun
      metadata:
        name: pipelinerun-$(uid)
      spec:
        pipelineRef:
          name: pipeline-input-parameter-variable
        params:
          - name: task-pvc
            value: pipelinerun-$(uid)-pvc
          - name: GIT_REPO
            value: $(params.GIT_REPO)
          - name: GIT_BRANCH
            value: $(params.GIT_BRANCH)
          - name: REGISTRY_REGION_ID
            value: $(params.REGISTRY_REGION_ID)
          - name: REGISTRY_NAMESPACE
            value: $(params.REGISTRY_NAMESPACE)
          - name: TARGET_CLUSTER_NAME
            value: $(params.TARGET_CLUSTER_NAME)
          - name: IMAGE_NAME
            value: $(params.IMAGE_NAME)
          - name: TARGET_REGION_ID
            value: $(params.TARGET_REGION_ID)
          - name: TARGET_NAMESPACE
            value: $(params.TARGET_NAMESPACE)
          - name: TARGET_RESOURCE_GROUP
            value: $(params.TARGET_RESOURCE_GROUP)
          - name: COS_PLAN
            value: $(params.COS_PLAN)
          - name: APP_ID_PLAN
            value: $(params.APP_ID_PLAN)
          - name: CLOUDANT_PLAN
            value: $(params.CLOUDANT_PLAN)
          - name: script
            value: $(params.script)
---
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: pipeline-input-parameter-variable
spec:
  params:
    - name: task-pvc
    - name: GIT_REPO
    - name: GIT_BRANCH
    - name: REGISTRY_REGION_ID
    - name: REGISTRY_NAMESPACE
    - name: TARGET_CLUSTER_NAME
    - name: IMAGE_NAME
    - name: TARGET_REGION_ID
    - name: TARGET_NAMESPACE
    - name: TARGET_RESOURCE_GROUP
    - name: COS_PLAN
    - name: APP_ID_PLAN
    - name: CLOUDANT_PLAN
    - name: script
  tasks:
    - name: clone
      taskRef:
        name: clone-repo-task
      params:
        - name: task-pvc
          value: $(params.task-pvc)
        - name: repository
          value: $(params.GIT_REPO)
        - name: branch
          value: master
    - name: script
      params:
        - name: task-pvc
          value: $(params.task-pvc)
        - name: GIT_REPO
          value: $(params.GIT_REPO)
        - name: GIT_BRANCH
          value: $(params.GIT_BRANCH)
        - name: REGISTRY_REGION_ID
          value: $(params.REGISTRY_REGION_ID)
        - name: REGISTRY_NAMESPACE
          value: $(params.REGISTRY_NAMESPACE)
        - name: TARGET_CLUSTER_NAME
          value: $(params.TARGET_CLUSTER_NAME)
        - name: IMAGE_NAME
          value: $(params.IMAGE_NAME)
        - name: TARGET_REGION_ID
          value: $(params.TARGET_REGION_ID)
        - name: TARGET_NAMESPACE
          value: $(params.TARGET_NAMESPACE)
        - name: TARGET_RESOURCE_GROUP
          value: $(params.TARGET_RESOURCE_GROUP)
        - name: COS_PLAN
          value: $(params.COS_PLAN)
        - name: APP_ID_PLAN
          value: $(params.APP_ID_PLAN)
        - name: CLOUDANT_PLAN
          value: $(params.CLOUDANT_PLAN)
        - name: script
          value: $(params.script)
      taskRef:
        name: gasket
      runAfter:
        - clone
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: gasket
spec:
  inputs:
    params:
      - name: task-pvc
      - name: GIT_REPO
      - name: GIT_BRANCH
      - name: REGISTRY_REGION_ID
      - name: REGISTRY_NAMESPACE
      - name: TARGET_CLUSTER_NAME
      - name: IMAGE_NAME
      - name: TARGET_REGION_ID
      - name: TARGET_NAMESPACE
      - name: TARGET_RESOURCE_GROUP
      - name: COS_PLAN
      - name: APP_ID_PLAN
      - name: CLOUDANT_PLAN
      - name: script
  steps:
    - name: echoenvvar
      image: ibmcom/pipeline-base-image
      env:
        - name: task_pvc
          value: $(inputs.params.task-pvc)
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: cd-secret
              key: API_KEY
        - name: GIT_REPO
          value: $(inputs.params.GIT_REPO)
        - name: GIT_BRANCH
          value: $(inputs.params.GIT_BRANCH)
        - name: REGISTRY_REGION_ID
          value: $(inputs.params.REGISTRY_REGION_ID)
        - name: REGISTRY_NAMESPACE
          value: $(inputs.params.REGISTRY_NAMESPACE)
        - name: TARGET_CLUSTER_NAME
          value: $(inputs.params.TARGET_CLUSTER_NAME)
        - name: IMAGE_NAME
          value: $(inputs.params.IMAGE_NAME)
        - name: TARGET_REGION_ID
          value: $(inputs.params.TARGET_REGION_ID)
        - name: TARGET_NAMESPACE
          value: $(inputs.params.TARGET_NAMESPACE)
        - name: TARGET_RESOURCE_GROUP
          value: $(inputs.params.TARGET_RESOURCE_GROUP)
        - name: COS_PLAN
          value: $(inputs.params.COS_PLAN)
        - name: APP_ID_PLAN
          value: $(inputs.params.APP_ID_PLAN)
        - name: CLOUDANT_PLAN
          value: $(inputs.params.CLOUDANT_PLAN)
        - name: script
          value: $(inputs.params.script)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -x
          echo 00
          echo export task_pvc=$task_pvc
          echo export API_KEY=$API_KEY
          echo export GIT_REPO=$GIT_REPO
          echo export GIT_BRANCH=$GIT_BRANCH
          echo export REGISTRY_REGION_ID=$REGISTRY_REGION_ID
          echo export REGISTRY_NAMESPACE=$REGISTRY_NAMESPACE
          echo export TARGET_CLUSTER_NAME=$TARGET_CLUSTER_NAME
          echo export IMAGE_NAME=$IMAGE_NAME
          echo export TARGET_REGION_ID=$TARGET_REGION_ID
          echo export TARGET_NAMESPACE=$TARGET_NAMESPACE
          echo export TARGET_RESOURCE_GROUP=$TARGET_RESOURCE_GROUP
          echo export COS_PLAN=$COS_PLAN
          echo export APP_ID_PLAN=$APP_ID_PLAN
          echo export CLOUDANT_PLAN=$CLOUDANT_PLAN
          echo export script=$script
          # BUILD
          # TODO REGISTRY_URL mus be based on TARGET_REGION_ID
          export REGISTRY_URL=us.icr.io
          # TODO BUILD_NUMBER is not needed
          export BUILD_NUMBER=3
          export ARCHIVE_DIR=.
          # DEPLOY
          export PIPELINE_KUBERNETES_CLUSTER_NAME="$TARGET_CLUSTER_NAME"
          # Setting HOME explicitly to have ibmcloud plugins available
          export HOME="/root"
          cat /cd-config/toolchain.json
          cd /working
          TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
          ibmcloud config --check-version false
          ibmcloud login -r $TOOLCHAIN_REGION -g $TARGET_RESOURCE_GROUP --apikey $API_KEY
          # download the cluster config and initialize KUBECONFIG
          ls -lR /root/.bluemix/plugins/container-service
          clusterid=$(ibmcloud ks cluster get $PIPELINE_KUBERNETES_CLUSTER_NAME --json | jq -r .id)
          ibmcloud ks cluster config --cluster $clusterid > /tmp/out
          cat /tmp/out
          eval $(egrep 'export *KUBECONFIG' /tmp/out)
          env | grep KUBECONFIG
          bash -x $script
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /working
          name: task-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
        - key: toolchain.json
          path: toolchain.json
